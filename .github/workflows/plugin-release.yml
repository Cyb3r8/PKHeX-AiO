name: Auto-Release

on:
  push:
    paths:
      - 'PKHeX.WinForms/MainWindow/Plugins/**'
      - 'PKHeX.Core/Resources/legality/**'
    branches:
      - main
      - master

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Get version from Directory.Build.props
      id: get_version
      run: |
        $xml = [xml](Get-Content Directory.Build.props)
        $version = $xml.Project.PropertyGroup.Version
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh
    
    - name: Check if release exists
      id: check_release
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $releases = gh release list --limit 100
        if ($releases -match $version) {
          echo "RELEASE_EXISTS=true" >> $env:GITHUB_OUTPUT
          echo "Release $version already exists"
        } else {
          echo "RELEASE_EXISTS=false" >> $env:GITHUB_OUTPUT
          echo "Release $version does not exist"
        }
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build project
      run: dotnet build --configuration Release --no-restore
    
    - name: Get modified files
      id: get_changes
      run: |
        $shouldRelease = $false
        $changedFiles = git diff --name-only HEAD~1 HEAD
        
        foreach ($file in $changedFiles) {
          if ($file -match 'PKHeX\.WinForms/MainWindow/Plugins/' -or 
              $file -match 'PKHeX\.Core/Resources/legality/') {
            $shouldRelease = $true
            break
          }
        }
        
        echo "SHOULD_RELEASE=$shouldRelease" >> $env:GITHUB_OUTPUT
        echo "Should trigger release: $shouldRelease"
      shell: pwsh
    
    - name: Create or update release
      if: steps.get_changes.outputs.SHOULD_RELEASE == 'True'
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $releaseExists = "${{ steps.check_release.outputs.RELEASE_EXISTS }}"
        
        # Prepare release notes
        $notes = "## Core Updates`n`n"
        $notes += "- PKHeX.exe has been updated`n"
        $notes += "- PKHeX.Core.dll has been updated`n`n"
        $notes += "*This release was automatically generated due to plugin or legality resource updates.*"
        
        # Create or update release
        if ($releaseExists -eq "true") {
          echo "Updating existing release $version"
          
          # Delete old assets if they exist
          $assets = gh release view $version --json assets --jq '.assets[].name'
          
          if ($assets -contains 'PKHeX.exe') {
            gh release delete-asset $version 'PKHeX.exe' -y
          }
          if ($assets -contains 'PKHeX.Core.dll') {
            gh release delete-asset $version 'PKHeX.Core.dll' -y
          }
          
          # Upload PKHeX.exe
          $exePath = "PKHeX.WinForms/bin/Release/net9.0-windows/PKHeX.exe"
          if (Test-Path $exePath) {
            gh release upload $version $exePath --clobber
          } else {
            echo "Warning: PKHeX.exe not found at $exePath"
          }
          
          # Upload PKHeX.Core.dll
          $corePath = "PKHeX.Core/bin/Release/net9.0/PKHeX.Core.dll"
          if (Test-Path $corePath) {
            gh release upload $version $corePath --clobber
          } else {
            echo "Warning: PKHeX.Core.dll not found at $corePath"
          }
          
          # Update release notes
          gh release edit $version --notes "$notes"
        } else {
          echo "Creating new release $version"
          
          # Create release
          gh release create $version --title "v$version" --notes "$notes"
          
          # Upload PKHeX.exe
          $exePath = "PKHeX.WinForms/bin/Release/net9.0-windows/PKHeX.exe"
          if (Test-Path $exePath) {
            gh release upload $version $exePath
          } else {
            echo "Warning: PKHeX.exe not found at $exePath"
          }
          
          # Upload PKHeX.Core.dll
          $corePath = "PKHeX.Core/bin/Release/net9.0/PKHeX.Core.dll"
          if (Test-Path $corePath) {
            gh release upload $version $corePath
          } else {
            echo "Warning: PKHeX.Core.dll not found at $corePath"
          }
        }
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
    
